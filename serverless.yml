service: users-authoriser
app: bizzflow
frameworkVersion: "2"

custom:
  environment: ${env:NODE_ENV, 'dev'}
  application: BizzFlow
  stage: ${self:provider.stage}
  contactPoint: 'rsouza01@gmail.com'

  customDomain:
      domainName: auth.bizzflow.link
      basePath: ${opt:stage, self:provider.stage}
      stage: ${self:provider.stage}
      createRoute53Record: true

provider:
  name: aws
  runtime: nodejs14.x
  description: BizzFlow Lambda authorizer

  stage:  ${env:NODE_ENV, 'dev'}
  region: ${env:REGION, 'eu-central-1'}

  lambdaHashingVersion: 20201221
  stackName: ${self:service}-${opt:stage, self:provider.stage}-stack
  apiName: ${self:custom.application}(${self:service})

  environment:
    NODE_ENV: ${env:NODE_ENV}
    SYSTEM: ${self:service}-${self:custom.environment}
    USERS_TABLE: users-${self:custom.environment}
    API_GATEWAY: ${self:custom.application}-ApiGW
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1

  stackTags:
    service: ${self:service}
    application: ${self:custom.application}
  tags:
    application: ${self:custom.application}
    service: ${self:service}
    
plugins:
  - serverless-plugin-typescript 
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-domain-manager

package:
  exclude:
    - config/.env.stg
    - config/.env.pro
  include:
    - config/.env.dev

functions:
  authorizer:
    handler: src/handler.jwtAuth
  authTestAuth:
    handler: src/handler.authTestHandler
    description: ${self:custom.application}(${self:service}) > handler for Custom Authoriser test
    events:
      - http:
          path: auth-test
          method: get
          cors: true
          # authorizer:
          #   name: 'authorizer'
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  authTestNoAuth:
    handler: src/handler.authTestHandler
    description: ${self:custom.application}(${self:service}) > handler for Custom Authoriser test (No Auth)
    events:
      - http:
          path: no-auth-test
          method: get
          cors: true

resources:
  Resources:
    LambdaInvokePolicy:
      Type: "AWS::IAM::ManagedPolicy"
      Properties:
        Description: "Policy for allowing Lambda Invoke"
        Path: "/"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "lambda:InvokeFunction"
              Resource: "*"
    AuthorizerInvokeRole:
      Type: "AWS::IAM::Role"
      Properties:
        Path: "/"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "apigateway.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        ManagedPolicyArns:
          - Ref: LambdaInvokePolicy

    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        MfaConfiguration: OFF
        UserPoolName: ${self:service}-${opt:stage, self:provider.stage}-user-pool
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: False
            RequireNumbers: True
            RequireSymbols: False
            RequireUppercase: True

    CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${self:service}-${opt:stage, self:provider.stage}-pool-client
        GenerateSecret: False
        UserPoolId:
          Ref: CognitoUserPool

    ApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: ${self:service}-${opt:stage, self:provider.stage}-cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [CognitoUserPool, Arn]

  Outputs:
    AuthorizerLambdaARN:
      Description: 'Custom Auth Lambda ARN'
      Value:
        'Fn::GetAtt': [AuthorizerLambdaFunction, Arn]
      Export:
        Name: ${self:service}-LambdaARN-${self:provider.stage}
    AuthorizerLambdaRoleARN:
      Description: Custom Authorizer Invoke Role ARN
      Value:
        'Fn::GetAtt': [AuthorizerInvokeRole, Arn]
      Export:
        Name: ${self:service}-InvokeLambdaRoleARN-${self:provider.stage}
